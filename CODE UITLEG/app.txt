from flask import Flask, render_template
import requests

# Maak een nieuwe Flask-applicatie
app = Flask(__name__)

# Basis URL van jouw mock JSON-server met Marvel-data
BASE_URL = "https://my-json-server.typicode.com/CedriqueCoomans/marvel-api"

# ===================== HOME =====================
@app.route("/")
def home():
    # Laad de startpagina (home.html)
    return render_template("home.html")

# ===================== FILMS =====================
@app.route("/films")
def show_films():
    # Vraag alle films op via API
    response = requests.get(f"{BASE_URL}/movies")
    
    # Als gelukt, zet JSON-data om naar Python-lijst
    films = response.json() if response.status_code == 200 else []

    # Geef de lijst films door aan films.html
    return render_template("films.html", films=films)

@app.route("/films/<int:film_id>")
def film_detail(film_id):
    # Vraag specifieke film op via ID
    film_res = requests.get(f"{BASE_URL}/movies/{film_id}")

    # Vraag alle characters op
    character_res = requests.get(f"{BASE_URL}/characters")

    # Zet responses om naar JSON-objecten
    film = film_res.json() if film_res.status_code == 200 else None
    characters = character_res.json() if character_res.status_code == 200 else []

    # Filter characters die in deze film meespelen (op basis van movie_ids lijst)
    film_characters = [char for char in characters if film_id in char.get("movie_ids", [])]

    # Toon film_detail.html met bijhorende karakters
    return render_template("film_detail.html", film=film, characters=film_characters)

# ===================== CHARACTERS =====================
@app.route("/characters")
def all_characters():
    # Vraag alle characters op
    response = requests.get(f"{BASE_URL}/characters")

    # Zet om naar JSON-lijst als succesvol
    characters = response.json() if response.status_code == 200 else []

    # Toon characters.html met character-lijst
    return render_template("characters.html", characters=characters)

@app.route("/characters/<string:type>s/<int:char_id>")
def character_detail(type, char_id):
    # Vraag alle characters op
    character_res = requests.get(f"{BASE_URL}/characters")

    # Vraag alle films op
    movie_res = requests.get(f"{BASE_URL}/movies")

    # Zet om naar JSON-lijsten
    characters = character_res.json() if character_res.status_code == 200 else []
    movies = movie_res.json() if movie_res.status_code == 200 else []

    # Zoek het character op basis van ID en type (hero/villain)
    character = next((c for c in characters if c["id"] == char_id and c["role"] == type), None)

    # Zoek de films waar dit personage in meedoet
    character_movies = [m for m in movies if m["id"] in character.get("movie_ids", [])] if character else []

    # Toon character_detail.html met character en bijhorende films
    return render_template("character_detail.html", character=character, character_movies=character_movies)

# ===================== PLANETS =====================
@app.route("/planets")
def show_planets():
    # Vraag alle planeten op
    response = requests.get(f"{BASE_URL}/planets")

    # Zet om naar JSON als succesvol
    planets = response.json() if response.status_code == 200 else []

    # Toon lijst van planeten
    return render_template("planets.html", planets=planets)

@app.route("/planets/<int:planet_id>")
def planet_detail(planet_id):
    # Vraag specifieke planeet op
    response = requests.get(f"{BASE_URL}/planets/{planet_id}")

    # Zet om naar dict als succesvol
    planet = response.json() if response.status_code == 200 else None

    # Toon detailpagina van planeet
    return render_template("planet_detail.html", planet=planet)

# ===================== APP STARTEN =====================
if __name__ == "__main__":
    app.run(debug=True)  # Start de server in debugmodus
